from final_decoder_util import *
import numpy as np
import math

def decode(syndrome_grid, mirror_factor = 2.5, tao_max = None, c_step = 0.2):
    """Decode the surface code using cellular automaton.
    Memory O(n^2), Time O(nlogn) (guessed, this need further theoretical investigation, moslty depends on the field convergence time)

    Args:
        syndrome_grid (np.array): grid containing the error syndrome, this is a np array of size 2*Code_Size. The data-qubits are 0, The measurement qubits are 1 if they have been triggered by an error, 0 otherwise

    Returns:
        Set(Tuple), Set(Tuple): Set of coordinates of the data qubits we have to apply resp. X and Z corrections to.
        Integer : Convergence time for X anyons
        Integer : Convergence time for Z anyons
    """

    if tao_max is None:
        tao_max = 5 * math.floor(math.log2(syndrome_grid.shape[0]/2)**2.5)
    
    # Extract anyons grid corresponding to each error
    xcopy = syndrome_grid.copy()
    zcopy = syndrome_grid.copy()
    z_anyons = zcopy[::2, 1::2]
    x_anyons = xcopy[1::2, ::2]

    

    # Extend z_anyons horizontally
    z_anyons, lr_bound = extend_with_symmetry(z_anyons, mirror_factor, 1)

    # Extend x_anyons vertically
    x_anyons, tb_bound = extend_with_symmetry(x_anyons, mirror_factor, 0)
    
    # Init "heat"-fields
    x_field = np.zeros(x_anyons.shape)
    z_field = np.zeros(z_anyons.shape)

    # Evolve fields and anyons until convergence
    x_moves, x_convergence_time = evolve_system(x_field, x_anyons, tao_max, tb_bound, 0)
    z_moves, z_convergence_time = evolve_system(z_field, z_anyons, tao_max, lr_bound, 1)


    # Compute the correction to apply according to the moves
    # Reminder, x_anyons are generated by z errors (and vice-versa) due to anti commutation prop. of stabilizer. Therefore, moves of x_anyons implies z_correction
    x_correction = get_correction_from_moves(z_moves, lr_bound)
    z_correction = get_correction_from_moves(x_moves, tb_bound, transpose=True)

    return x_correction, z_correction, x_convergence_time, z_convergence_time